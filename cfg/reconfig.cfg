#!/usr/bin/env python
PACKAGE = "inter_iit_uav_fleet"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# cam_t = gen.add_group("Camera Translation")
# cam_rot = gen.add_group("Camera Rotation")
params = gen.add_group("Params")
flags = gen.add_group("Flags")
hsv = gen.add_group("HSV")
# sizes = gen.add_group("Sizes")

gen.add("is_rectified",   bool_t,   0, "Is the camera image rectified?",  False)
gen.add("total_objects", int_t, 1, "Number of objects to detect", 4, 1, 10)

# cam_t.add("t_x", double_t, 1, " Enter coordinates of ", 0, -100, 100)
# cam_t.add("t_y", double_t, 2, "camera origin relative", 0, -100, 100)
# cam_t.add("t_z", double_t, 3, "    to quad centre    ", 0, -100, 100)

# cam_rot.add("r_xx", double_t, 4, " Enter  ", 0, -10, 10)
# cam_rot.add("r_xy", double_t, 5, "rotation", 0, -10, 10)
# cam_rot.add("r_xz", double_t, 6, " matrix ", 0, -10, 10)
# cam_rot.add("r_yx", double_t, 7, "  for   ", 0, -10, 10)
# cam_rot.add("r_yy", double_t, 8, "        ", 0, -10, 10)
# cam_rot.add("r_yz", double_t, 9, "  quad  ", 0, -10, 10)
# cam_rot.add("r_zx", double_t, 10, "   to  ", 0, -10, 10)
# cam_rot.add("r_zy", double_t, 11, " camera", 0, -10, 10)
# cam_rot.add("r_zz", double_t, 12, " frame ", 0, -10, 10)

params.add("loc_error", double_t, 13, "Expected error in location data", 10, 0, 20)
params.add("hover_height", double_t, 14, "Height at which the quad will hover", 5, 0, 10)
params.add("land_height", double_t, 15, "Least height the quad can achieve", 1, 0, 3)
params.add("descent_step", double_t, 16, "Distance between descent waypoints", 0.4, 0, 1)
params.add("hover_time", int_t, 17, "Time for which quad will hover at waypoints", 5, 1, 20)
params.add("exit_time", double_t, 37, "Time to wait for detection", 10, 0, 240)
params.add("transition_time", double_t, 39, "Time between two state transition calls", 1, 0, 10)


# flags.add("debug", bool_t, 18, "publish debug topics", True)
flags.add("verbose", bool_t, 19, "increase verbosity of output", False)
flags.add("exec", bool_t, 20, "stop/start object detector", True)
# flags.add("eigenCheck", bool_t, 21, "pca check", True)
# flags.add("diagCheck", bool_t, 22, "diag length check", True)
# flags.add("sizeCheck", bool_t, 23,"check actual size", True)
# flags.add("centreCorrect", bool_t, 24,"apply centre correction", True)

# color_enum = gen.enum([gen.const("Red", int_t, 0, "Red"),
#                        gen.const("Blue", int_t, 1, "Blue"),
#                        gen.const("Yellow", int_t, 2, "Yellow"),
#                        gen.const("Orange", int_t, 3, "Orange"),],
#                      "Select color to set hsv for")

# hsv.add("color", int_t, 25, "choose color", 1, 0, 3, edit_method=color_enum)
hsv.add("h_min", int_t, 26, "set min. hue", 0, 0, 180)
hsv.add("h_max", int_t, 27, "set max. hue", 180, 0, 180)
hsv.add("s_min", int_t, 28, "set min. saturation", 80, 0, 255)
hsv.add("s_max", int_t, 29, "set max. saturation", 255, 0, 255)
hsv.add("v_min", int_t, 30, "set min. value", 80, 0, 255)
hsv.add("v_max", int_t, 31, "set max. value", 255, 0, 255)

# sizes.add("r_size", double_t, 32, "size of red mailbox in sq. m.", 0.4875, 0, 1)
# sizes.add("b_size", double_t, 33, "size of blue mailbox in sq. m.", 1, 0, 2)
# sizes.add("y_size", double_t, 34, "size of yellow mailbox in sq. m.", 0.609, 0, 1)
# sizes.add("o_size", double_t, 38, "size of orange package in sq. m.", 0.5, 0, 1)
# sizes.add("del_size", double_t, 35, "tolerance for size check in sq. m.", 1, 0 , 2)
# sizes.add("min_height", double_t, 36, "min. height above which size is checked", 0, 0, 10)

exit(gen.generate(PACKAGE, "detector_node", "reconfig"))
